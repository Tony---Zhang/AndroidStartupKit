apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'
apply plugin: 'com.github.triplet.play'

android {
    compileSdkVersion 27
    buildToolsVersion '28.0.1'

    defaultConfig {
        applicationId 'com.thoughtworks.startup'
        minSdkVersion 17
        targetSdkVersion 27
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        versionCode 1000
        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName '0.1.0'
    }

    signingConfigs {
        // You must set up an environment var before release signing
        // Run: export APP_KEY={password}
        // TODO Add your release keystore in /keystore folder
//            storeFile file('keystore/release.keystore')
//            keyAlias 'alias'
//            storePassword "$System.env.APP_KEY"
//            keyPassword "$System.env.APP_KEY"
        release {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }

        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix " Debug"
            debuggable true
        }
    }

    flavorDimensions "app"

    productFlavors {
        beta {
            dimension "app"
            applicationIdSuffix = ".beta"
            versionNameSuffix " Beta"
            versionName "1.0.0"
        }

        production {
            dimension "app"
            applicationId 'com.thoughtworks.startup'
            versionName "1.0.0"
        }
    }

    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'beta') {
            variant.setIgnore(true)
        }
        if (variant.buildType.name == 'debug'
                && variant.getFlavors().get(0).name == 'production') {
            variant.setIgnore(true)
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries true
        maxProcessCount 8
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    lintOptions {
        abortOnError false
    }
}

play {
    serviceAccountEmail = 'your-service-account-email'
    pk12File = file('key.p12')
    // By default publishes to Alpha channel
    track = 'alpha'
}

dependencies {
    final PLAY_SERVICES_VERSION = '15.0.1'
    final SUPPORT_LIBRARY_VERSION = '27.1.1'
    final RETROFIT_VERSION = '2.4.0'
    final DAGGER_VERSION = '2.16'
    final BUTTERKNIFE_VERSION = '8.8.1'
    final DEXMAKER_VERSION = '1.4'
    final ASSERTJ_ANDROID = '1.1.1'
    final ESPRESSO_VERSION = '3.0.2'
    final RUNNER_VERSION = '0.4.1'
    final RX_JAVA = '1.2.1'

    def daggerCompiler = "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    def jUnit = "junit:junit:4.12"
    def mockito = "org.mockito:mockito-core:1.10.19"

    // App Dependencies
    implementation "com.google.android.gms:play-services-gcm:$PLAY_SERVICES_VERSION"
    implementation "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:design:$SUPPORT_LIBRARY_VERSION"

    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.squareup.sqlbrite:sqlbrite:0.5.0'
    implementation "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    implementation "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
    implementation "com.squareup.retrofit2:adapter-rxjava:$RETROFIT_VERSION"
    implementation 'com.squareup:otto:1.3.8'

    implementation "io.reactivex:rxandroid:$RX_JAVA"
    implementation "io.reactivex:rxjava:$RX_JAVA"
    implementation "com.jakewharton:butterknife:$BUTTERKNIFE_VERSION"
    annotationProcessor "com.jakewharton:butterknife-compiler:$BUTTERKNIFE_VERSION"
    implementation 'com.jakewharton.timber:timber:4.5.1'

    implementation "com.google.dagger:dagger:$DAGGER_VERSION"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28' //Required by Dagger2

    implementation 'com.google.guava:guava:20.0'

    // Instrumentation test dependencies
    androidTestImplementation jUnit
    androidTestImplementation mockito
    androidTestImplementation "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$ESPRESSO_VERSION") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$ESPRESSO_VERSION"
    androidTestImplementation "com.android.support.test:runner:$RUNNER_VERSION"
    androidTestImplementation "com.android.support.test:rules:$RUNNER_VERSION"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker:$DEXMAKER_VERSION"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-dx:$DEXMAKER_VERSION"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-mockito:$DEXMAKER_VERSION"

    // Unit tests dependencies
    testImplementation jUnit
    testImplementation mockito
    testImplementation("com.squareup.assertj:assertj-android:$ASSERTJ_ANDROID") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testImplementation ('org.robolectric:robolectric:3.1.2') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    // APT dependencies
    annotationProcessor daggerCompiler
    testAnnotationProcessor daggerCompiler
    androidTestAnnotationProcessor daggerCompiler
}

// Log out test results to console
tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}
